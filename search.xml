<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021-09-01 API串接</title>
      <link href="/Blog/2021/09/01/2021-09-01%20API%E4%B8%B2%E6%8E%A5/"/>
      <url>/Blog/2021/09/01/2021-09-01%20API%E4%B8%B2%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>因為自己練習串接 Twitch API 做到一個段落，<br>所以記錄一下自己學了什麼，這篇主要針對 API 基礎的部分。</p><h1 id="API"><a href="#API" class="headerlink" title=" API"></a><strong><font color=#800000> API</font></strong></h1><p>Application Programming Interface(應用程式介面)，縮寫為<font color=#FF6600> API</font>，<br>簡單來說，是品牌開發出的一種接口，讓第三方可以開發、應用在自身的產品上的系統溝通介面。<br><a href="https://www.youtube.com/watch?v=zvKadd9Cflc">點我在 Youtube 上看影片會更清楚。</a><br>不同公司，不一樣的工程師，設計的名稱都會不一樣，沒有統一的命名方式，<br>造成在引用各家 API 時，都需要詳讀 API 文件，理解所有設計命名規則後，才可使用。</p><h1 id="REST-amp-RESTful"><a href="#REST-amp-RESTful" class="headerlink" title=" REST &amp; RESTful "></a><strong><font color=#800000> REST &amp; RESTful </font></strong></h1><p><font color=#FF6600> REST</font>，Representational State Transfer( 表現層狀態轉移)，是一種設計風格。<br>以此規範設計的 API，稱為 <font color=#FF6600> RESTful API</font>。<br>RESTful API 主要由三種元件組成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nouns 名詞：定義資源位置的 URL，每個資源在網路上都會有唯一的位置。</span><br><span class="line">Verbs 動詞：對資源要做的動作。</span><br><span class="line">Content Types 資源呈現方式：API 資源可以以多種方式表現，最常用的是 JSON，較輕也較好處理。</span><br></pre></td></tr></table></figure><p>一般的 API，可能會是這樣：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">獲得資料GET    /getData</span><br><span class="line">新增資料POST   /createData</span><br><span class="line">刪除資料DELETE /deleteData/1</span><br></pre></td></tr></table></figure><p>若以 RESTful API 風格開發的話：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">獲得資料GET     /data</span><br><span class="line">新增資料POST    /data</span><br><span class="line">刪除資料DELETE  /data/1</span><br></pre></td></tr></table></figure><p>基本上就是用一個 URL 定位資源，將動作藏在 HTTP 的 method 裡面。<br>使用 RESTful 風格設計的 API，就有了以下幾種優點及限制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有唯一的URL表示資源位置，統一的 API 接口。(Uniform Interface)</span><br><span class="line">無狀態。(Stateless)</span><br></pre></td></tr></table></figure><p>RESTful 的狀態，即 HTTP 的請求狀態，一般 Web 服務中，Server 端和 Client 端交互的資訊，<br>會存在 Server 端的 Session (例如：已登入狀態)，<br>在 Client 端再次發送請求的時候，Server 端透過保存在 Server 端的 Session，去執行 request。<br>無狀態的意思，即 Client 端自行保存狀態，在請求 Server 的時候，一併附上給 Server 端，<br>Server 端無保存 Client 端的狀態資訊。<br><font color=#FF6600> 無狀態</font>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在用戶登錄系統時，Server 產生 token 紀錄 user 已登錄系統，</span><br><span class="line">然後把 token 還給 Client，在 Client 再次發送請求的時候，把 token 一起發給 Server，</span><br><span class="line">這樣 Server 就知道這一個 Client 是已經處於登錄的狀態。</span><br></pre></td></tr></table></figure><p><font color=#FF6600> 有狀態</font>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查詢員工工資：</span><br><span class="line">登錄系統。</span><br><span class="line">進入查詢工資的頁面。</span><br><span class="line">搜索該員工。</span><br><span class="line">點擊姓名查看工資。</span><br></pre></td></tr></table></figure><p>查詢工資的每一個步驟都依賴於前一個步驟，只要前置操作不成功，後續操作就無法執行。<br>如果輸入一個URL就可以直接得到指定員工的工資，這種情況就是無狀態的，因為獲取工資不依賴於其他資源或狀態。</p><h1 id="Web-API"><a href="#Web-API" class="headerlink" title=" Web API "></a><strong><font color=#800000> Web API </font></strong></h1><p>Web API，主要就是基於 HTTP 的網路服務，若設計符合 REST 原則，則可以稱為 RESTful API。<br>而 Web API 預設就支援 REST 這樣設計的風格，所以可以很輕易的建置 RESTful 服務。<br>Web API 特色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">支援透過 HTTP 動詞 (GET、POST、PUT、DELETE) 表示的 CRUD 操作。</span><br><span class="line">請求的回覆可以透過 HTTP Status Code 來表達不同的含義，並且用戶端可以通過 Accept Header 來與服務協商。</span><br><span class="line">預設支援 XML 與 JSON 兩種資料格式的輸出，並且可以擴充增加其他格式。</span><br><span class="line">內建支援 OData 。</span><br><span class="line">可以接受或產生非物件的內容，如 images、PDF Files 等。</span><br><span class="line">支援 Self-Host 或 IIS Host。</span><br><span class="line">支援 ASP.NET MVC 的特性，能夠使用 Cache 機制，減少伺服器負載並加快反應的速度。</span><br></pre></td></tr></table></figure><p>Web API 優點：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">支援 ASP.NET 整合驗證。</span><br><span class="line">提高 Server Scalability(可擴展性) 的能力。</span><br><span class="line">支援快取，可改善反應時間以及 Server 的負載能力。</span><br><span class="line">不需要 Resource Discovery 機制，以降低程式耦合性。</span><br><span class="line">支援新的內容格式不需要丟掉舊的，如 XML 及現行前端常用的 JSON。</span><br><span class="line">集中商業邏輯程式，以避免過度分散的邏輯程式，以提高可維護性。</span><br></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title=" Ajax "></a><strong><font color=#800000> Ajax </font></strong></h1><p>Ajax，全名是 Asynchronous JavaScript and XML，<br>重點在於 <font color=#FF6600> Asynchronous (非同步) </font>這個單字，<br>就是執行完之後就不管它了，不等結果回來就繼續執行下一行。<br>原本寫的 JavaScript 幾乎都是同步執行的。意思是他執行到某一行的時候，會等這行執行完畢，<br>才執行到下一行，確保執行順序。也就是說最後一行需要等很長一段時間才能執行到。<br>當 JavaScript 執行到 sendRequest 的時候，由於是同步的，就會等待 Response 回來才繼續做事。<br>換句話說，在 Response 還沒回來之前，整個 JavaScript 引擎是不會執行任何東西的。<br>像是這種已經預期到可能非常耗時間，不穩定的操作，就不能用同步的方式，而是要用非同步。<br>這邊需要特別注意的是「非同步的 Function 不能直接透過 return 把結果傳回來」，<br>要利用 <font color=#FF6600> Callback Function </font>，回呼函式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假設有個發送 Request 的函式叫做 sendRequest</span></span><br><span class="line">sendRequest(<span class="string">&#x27;https://api.twitch.tv/kraken/games/top?client_id=xxx&#x27;</span>, callMe);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callMe</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者寫成匿名函式</span></span><br><span class="line">sendRequest(<span class="string">&#x27;https://api.twitch.tv/kraken/games/top?client_id=xxx&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title=" XMLHttpRequest "></a><strong><font color=#800000> XMLHttpRequest </font></strong></h1><p>要發送 Request 的話，就要透過瀏覽器幫我們準備好的一個物件，叫做XMLHttpRequest，<br>範例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`https://api.twitch.tv/helix/streams`</span>, <span class="literal">true</span>);</span><br><span class="line">request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//指定當資料回來的時候，要用哪一個 function 去處理。</span></span><br><span class="line">  <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="comment">// Success!</span></span><br><span class="line">    <span class="built_in">console</span>.log(request.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure><h1 id="同源政策-Same-Origin-Policy"><a href="#同源政策-Same-Origin-Policy" class="headerlink" title=" 同源政策(Same Origin Policy) "></a><strong><font color=#800000> 同源政策(Same Origin Policy) </font></strong></h1><p>如果從目前瀏覽器的網頁向跟自己「不同源」的網址發出請求和存取資料，<br>就是被視作「跨來源存取」，一般情況下是不允許的，只有「同源」才會被允許。<br>原因：這是基於網絡安全的考量，避免有駭客惡意呼叫其他人的網絡服務。<br>若沒有這個政策保護，別人就可以任意修改和存取你網頁裡的資源了。<br><font color=#FF6600> 注意 </font> ：請求 (request) 的確是有發出去，瀏覽器之後也有收到回應 (response)，<br>但瀏覽器因為同源政策，不把結果傳回給你的 JavaScript。<br>同源政策有兩種：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOM 同源政策</span><br><span class="line">Cookie 同源政策</span><br></pre></td></tr></table></figure><h3 id="DOM-的同源政策"><a href="#DOM-的同源政策" class="headerlink" title="DOM 的同源政策"></a>DOM 的同源政策</h3><p>在瀏覽器裡載入的所有圖片、文字、程式碼等等的資源，會變成一個個 DOM 元素。<br>同源政策會禁止我去存取別人網站裡的 DOM 元素，即別人網站裡的網絡資源。<br>要判斷是否同源，就看這兩個網址在以下的部分是否相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheme (通訊協定，http, https不一樣)</span><br><span class="line">domain</span><br><span class="line">port (埠號，如有指定)</span><br></pre></td></tr></table></figure><h3 id="同源政策並非完全禁止跨來源存取"><a href="#同源政策並非完全禁止跨來源存取" class="headerlink" title="同源政策並非完全禁止跨來源存取"></a>同源政策並非完全禁止跨來源存取</h3><p>但在某些情況下，即使兩個網站是「不同源」，也可以允許存取的。<br>例如以下情況：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">跨來源寫入(Cross-origin writes）</span><br><span class="line">例如允許：表單送出(form)、連結(link)、重新導向(redirect)</span><br><span class="line"></span><br><span class="line">跨來源嵌入(Cross-origin embedding)</span><br><span class="line">例如允許：嵌入圖片&lt;img&gt;、影片&lt;video&gt;、&lt;iframe&gt;、放在 &lt; script &gt;裡的程式碼、</span><br><span class="line">CSS stylesheet、&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt; 等等。</span><br><span class="line">雖然網頁可以顯示這些資源，但我的 JavaScript 並不能讀取這些資源的內容。</span><br></pre></td></tr></table></figure><h3 id="Cookie-的同源政策"><a href="#Cookie-的同源政策" class="headerlink" title="Cookie 的同源政策"></a>Cookie 的同源政策</h3><p>Cookie 的同源跟以上所說的 DOM 同源有點不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">只要 domain 跟 Path 與 Cookie 上的一樣就會被視為同源。</span><br><span class="line">若經過一些設定才會判斷 scheme 要是 http 或 https。</span><br><span class="line">另外子網域與母網域的 Cookie 可以共用。</span><br></pre></td></tr></table></figure><h1 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title=" CORS (Cross-Origin Resource Sharing) "></a><strong><font color=#800000> CORS (Cross-Origin Resource Sharing) </font></strong></h1><p>CORS，全名為 Cross-Origin Resource Sharing，跨來源資源共享。<br>這套規範跟你說，如果你想開啟跨來源 HTTP 請求的話，<br>Server 必須在 Response 的 Header 裡面加上<font color=#FF6600> Access-Control-Allow-Origin </font>。<br>當瀏覽器收到 Response 之後，會先檢查<font color=#FF6600> Access-Control-Allow-Origin </font>裡面的內容，<br>如果裡面有包含現在這個發起 Request 的 Origin 的話，就會允許通過，讓程式順利接收到 Response。</p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title=" JSONP "></a><strong><font color=#800000> JSONP </font></strong></h1><p>除了以上設定，我們也可以透過<font color=#FF6600> JSONP (JSON with Padding) </font>  這個方法來解決。<br>剛才提過 &lt; script &gt; tag 是不受同源政策限制的，我們可以用它來解決問題。<br>我們常常引用 CDN 或是 Google Analytics 之類的第三方套件，<br>網址都是其他 Domain 的，但是卻能正常載入。<br>就是利用 &lt; script &gt; 的這個特性來達成跨來源請求的。<br>JSONP 的做法就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在一個 &lt;script&gt; tag 裡的放入伺服器端提供的網址，</span><br><span class="line">之後在另一個 &lt;script&gt; tag 裡宣告一個函式，</span><br><span class="line">函式名字是由伺服器端提供，也可以在伺服器端所提供的網址裡找到</span><br></pre></td></tr></table></figure><p><font color=#FF6600> 注意 </font>：雖然 JSONP 解決了跨來源問題，<br>但是 JSONP 只適用於 GET 請求，無法做到 POST，所以首選還是上面提及的 CORS 的方法。</p><h1 id="Preflight-Request"><a href="#Preflight-Request" class="headerlink" title=" Preflight Request "></a><strong><font color=#800000> Preflight Request </font></strong></h1><p>Preflight request 並不是我本身想要發出的請求。<br>Preflight request 是瀏覽器端發出請求前的一個<font color=#FF6600> 預檢請求 </font>，<br>這個預檢請求是負責查問伺服器，是否批准我們發出請求給它。<br>Preflight request 會帶有一些關於我想發的請求的一些資訊，<br>例如：我將會使用的 HTTP 請求方法(GET、POST…)、Authorization 等等。<br>當我發出的請求<font color=#FF6600> 不是簡單請求 </font>時，就會觸發 Preflight request，<br>當 Preflight request 被通過，我本身的請求才會被發出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-08-21 Webpack-module</title>
      <link href="/Blog/2021/08/21/2021-08-21%20Webpack-Babel/"/>
      <url>/Blog/2021/08/21/2021-08-21%20Webpack-Babel/</url>
      
        <content type="html"><![CDATA[<h1 id="Babel"><a href="#Babel" class="headerlink" title=" Babel"></a><strong><font color=#800000> Babel</font></strong></h1><p>在開發的過程中，通常會使用到 ES6 以上的語法，<br>這時候就需要 Babel 將我們的 js 檔編譯為瀏覽器可運行的版本，<br>接下來要將 Babel 引入到我們的專案中。<br>用 npm 來安裝 babel 相關的 module 和 loader：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core babel-loader @babel/preset-env</span><br></pre></td></tr></table></figure><p>在專案的根目錄新增一個 <font color=#FF6600>.babelrc</font> 設定檔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;@babel/preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著修改 <font color=#FF6600>webpack.config.js</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        //所有.js 檔都會用 Babel 編譯</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.js$/i,</span><br><span class="line">            exclude: /node_modules/,</span><br><span class="line">            use: [&#x27;babel-loader&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="CSS、SCSS"><a href="#CSS、SCSS" class="headerlink" title=" CSS、SCSS"></a><strong><font color=#800000> CSS、SCSS</font></strong></h1><p>之前也提到過的 CSS 預處理器，接下來就來引入最普遍使用的 Sass/SCSS<br>以及 CSS module。<br>用 npm 來安裝 SCSS 和 CSS 相關的套件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader style-loader</span><br><span class="line">npm install --save-dev sass-loader dart-sass</span><br></pre></td></tr></table></figure><p>修改 <font color=#FF6600>webpack.config.js</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.js$/i,</span><br><span class="line">            exclude: /node_modules/,</span><br><span class="line">            use: [&#x27;babel-loader&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">        //用 css loader 來處理 css 檔案</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.css$/i,</span><br><span class="line">          use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">        //用 sass loader 來處理 sass 或 scss 檔案</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.s[ac]ss$/i,</span><br><span class="line">          use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Webpack 中 loader 的順序是從後到前，舉個例子：<br>Webpack 會先用 sass loader 處理 sass 檔(將 sass 檔編譯成 css 檔)，<br>再用 css loader(將 css 檔編譯成 js 檔)，<br>最後則是 style loader (在 DOM 元件插入 style 標籤，再置入 css 樣式)，<br>因此順序不能更改，否則會出錯。<br>再來在 bundle 的進入點引入 css 檔或 scss 檔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import &#x27;./css/style.scss&#x27;;</span><br></pre></td></tr></table></figure><h1 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title=" mini-css-extract-plugin"></a><strong><font color=#800000> mini-css-extract-plugin</font></strong></h1><p>mini-css-extract-plugin 可以幫我們壓縮 css 檔，並另外獨立出來。<br>安裝指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>接著修改 <font color=#FF6600>webpack.config.js</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [new MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: &#x27;static/css/[name].[hash].css&#x27;,</span><br><span class="line">  &#125;)],</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.js$/,</span><br><span class="line">            exclude: /node_modules/,</span><br><span class="line">            use: [&#x27;babel-loader&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.css$/i,</span><br><span class="line">          use: [&#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">          &#125;, &#x27;css-loader&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: /\.s[ac]ss$/i,</span><br><span class="line">          use: [&#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">          &#125;, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title=" HtmlWebpackPlugin"></a><strong><font color=#800000> HtmlWebpackPlugin</font></strong></h1><p>HtmlWebpackPlugin 可以自動幫我們引入靜態檔案，而不用手動引入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>修改 <font color=#FF6600>webpack.config.js</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/index.html&#x27;,</span><br><span class="line">      //使用 src 裡面的 index.html 作為模板</span><br><span class="line">      filename: &#x27;index.html&#x27;,</span><br><span class="line">      //處理完後的檔案名稱</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>執行完 npm run build 後，就會在 dist 生成一個 index.html，<br>自動引入 css 檔和 js 檔。</p><h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title=" webpack-dev-server"></a><strong><font color=#800000> webpack-dev-server</font></strong></h1><p>使用 webpack dev server的 hot reload 功能，<br>可以幫助你每次存檔時自動執行 Webpack，<br>不用自己執行 Webpack 指令。<br>安裝指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><p>修改 <font color=#FF6600>package.json</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --mode production&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack --mode development&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;webpack-dev-server --mode development --open --hot&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>執行 npm run start，webpack dev server 就會在你每次存檔時，<br>自動幫你執行 Webpack 指令。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-08-19 Webpack 使用</title>
      <link href="/Blog/2021/08/19/2021-08-19%20Webpack%20%E4%BD%BF%E7%94%A8/"/>
      <url>/Blog/2021/08/19/2021-08-19%20Webpack%20%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack-簡介"><a href="#Webpack-簡介" class="headerlink" title=" Webpack 簡介"></a><strong><font color=#800000> Webpack 簡介</font></strong></h1><p>現在的前端工程擁有太多方便的東西和語法糖，為了要把各式各樣的語言編譯讓瀏覽器看得懂，<br>就會使用到 Webpack。<br>Webpack 是一個自動化網頁打包工具，<br>把開發使用到的模組經過最佳化處裡，然後打包成我們要用的檔案，<br>這樣就不必使用 &lt; script &gt; 來嵌入各種套件的 JavaScript 了，<br>也可以直接在專案中下載需要的套件，<br>簡單來講，Webpack 可幫我們完成以下事情：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整合 CommonJS &amp; AMD &amp; ES6 Modulrs 模組規範</span><br><span class="line">編譯 Sass/SCSS、Pug、CoffeeScript 等預處理器</span><br><span class="line">轉換 TypeScript、ECMAScript 6 相關代碼</span><br><span class="line">解析模組間的相互依賴，進行打包處理</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure><h1 id="安裝-Webpack"><a href="#安裝-Webpack" class="headerlink" title=" 安裝 Webpack"></a><strong><font color=#800000> 安裝 Webpack</font></strong></h1><p>安裝 Webpack 前我們需要先安裝之前學過的 <a href='https://cdxdvd55123.github.io/Blog/2021/08/14/2021-08-14%20Node-js/'>Node.js</a>，<br>再來用 npm init 來創建一個 package.json 到專案資料夾，<br>這個部分也跟 <a href='https://cdxdvd55123.github.io/Blog/2021/08/14/2021-08-14%20Node-js/'>Node.js</a> 裡面提到的一樣，<br>接著利用 npm 安裝 Webpack 套件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install  webpack webpack-cli --save-dev</span><br><span class="line">// --save-dev 也可以寫成 -D。</span><br><span class="line">// Webpack 4 後要把以往都綁在 Webpack 內的 Webpack-CLI 挪出來另外安裝，</span><br><span class="line">// 所以除了安裝 Webpack 還要記得安裝 Webpack-CLI。</span><br></pre></td></tr></table></figure><p>這裡有兩個需要知道的名詞和用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devDependencies：開發的時候會用到的套件，例如 負責打包的webpack。</span><br><span class="line">dependencies：上線發佈後依然需要用到的套件，例如 react。</span><br><span class="line">//會紀錄在 package.json 裡面</span><br></pre></td></tr></table></figure><h1 id="Webpack-基本配置"><a href="#Webpack-基本配置" class="headerlink" title=" Webpack 基本配置"></a><strong><font color=#800000> Webpack 基本配置</font></strong></h1><p>初始專案結構：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">webpack-demo/</span><br><span class="line">│</span><br><span class="line">├─── node_modules/</span><br><span class="line">│</span><br><span class="line">├─── src/</span><br><span class="line">│   │</span><br><span class="line">│   └─── index.js          # entry 入口檔案</span><br><span class="line">│</span><br><span class="line">├─── webpack.config.js    # Webpack 配置檔案</span><br><span class="line">├─── package-lock.json</span><br><span class="line">└─── package.json         # 已安裝 webpack、webpack-cli</span><br></pre></td></tr></table></figure><p>安裝完畢後，在主目錄建立 webpack.config.js 進行初始化的設置。<br>進入webpack.config.js 做以下設定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="comment">//改為&#x27;production&#x27;則會自動壓縮檔案</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;.src/index.js&quot;</span>, </span><br><span class="line">  <span class="comment">//代表專案的進入點，也就是放在 src 路徑下的 index.js。</span></span><br><span class="line">  <span class="attr">output</span>: &#123; <span class="comment">//打包輸出後的檔案</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;index.bundle.js&quot;</span>, </span><br><span class="line">    <span class="comment">//打包後的 JavaScript 檔案名稱</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="comment">//設定打包後的檔案放置路徑，通常都會搭配 path 模組以形成絕對路徑</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改 package.json 以便快速執行指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --mode production&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack --mode development&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>執行編譯指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>今天就先寫一些基本的東西，之後搭配其他套件使用會再額外寫文章。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-08-15 Request &amp; Response</title>
      <link href="/Blog/2021/08/15/2021-08-15%20Request%20&amp;%20Response/"/>
      <url>/Blog/2021/08/15/2021-08-15%20Request%20&amp;%20Response/</url>
      
        <content type="html"><![CDATA[<p>這篇同樣也是因為要練習串接 API，所需要的知識，所以針對這個部分做學習。</p><h1 id="Request-＆-Response"><a href="#Request-＆-Response" class="headerlink" title=" Request ＆ Response"></a><strong><font color=#800000> Request ＆ Response</font></strong></h1><p>根據 HTTP 通訊協定其中的內容 Request ＆ Response 有標準化內容格式，<br>並且都包含了 header 和 body。<br>四個 HTTP 通訊協定的內容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">標準化內容格式</span><br><span class="line">分為 header 跟 body</span><br><span class="line">用狀態碼標準化結果 （Http status code）</span><br><span class="line">用動詞標準化請求方法 （Http Request Method）</span><br></pre></td></tr></table></figure><h3 id="header-body"><a href="#header-body" class="headerlink" title="header . body"></a>header . body</h3><p>header 大多會包含：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IP 位置</span><br><span class="line">Http Request Method 狀態碼</span><br><span class="line">Http status code 請求方法</span><br></pre></td></tr></table></figure><p>其他額外資訊也會放在這裡，<br>例如：Client-ID、User-Agent、Authorization 等。<br>(在 API 串接時會使用到)<br/><br>body：<br>主要傳遞的內容，但也有可以沒有內容。<br/></p><h1 id="Http-Request-Method"><a href="#Http-Request-Method" class="headerlink" title="Http Request Method"></a><strong><font color=#800000>Http Request Method</font></strong></h1><p>為了區分 Request 不同的用途，使用動詞標準化，<br>讓 Server 能清楚辨別 Request 的目的，定義了八種 Method，<br>最常見的 Method 為 Get 及Post。<br>Get：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">單純的跟 server 要一個連結或圖片，通常網頁都是 Get 的 request 比較多。</span><br><span class="line">最常使用的 Method。</span><br><span class="line">例如：要去某個網址、看某張圖片，</span><br><span class="line">傳送的資料會以 Query String 的方式加在 url 上。</span><br></pre></td></tr></table></figure><p>Post：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要執行一些動作時，會傳送 Post request。</span><br><span class="line">例如：登入會員、送出表單</span><br><span class="line">獲取「指定的」資訊，放在 request body（Form data）裡面。</span><br></pre></td></tr></table></figure><p>其他的 HTTP Request Method：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Put ：取代掉整個 request。</span><br><span class="line">Patch：修改部分 request。</span><br><span class="line">Delete：刪除資源。</span><br><span class="line">Head：只要獲取 request 的 header，不要 body。</span><br><span class="line">Option：可以了解 server 提供哪些溝通方法。</span><br></pre></td></tr></table></figure><h1 id="Http-status-code-狀態碼"><a href="#Http-status-code-狀態碼" class="headerlink" title="Http status code 狀態碼"></a><strong><font color=#800000>Http status code 狀態碼</font></strong></h1><p>用數字表示 reponse 的狀態，通常以開頭的數字做判斷<br>1xx ：稍等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100 Continue：Server 成功接收、但 Client 還要進行一些處理。</span><br></pre></td></tr></table></figure><p>2xx：成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200 OK：成功</span><br><span class="line">204 No Content：成功但沒有回傳的內容（發出 Delete 的 request）</span><br></pre></td></tr></table></figure><p>3xx：重新導向，用戶端瀏覽器必須採取更多動作才能完成要求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">301 Moved Permanently：資源「永久」移到其他位置，</span><br><span class="line">再下一次發出 request 時，瀏覽器直接到新位置。</span><br><span class="line">302 Found（Moved Temporarily）：資源「暫時」移到其他位置。</span><br><span class="line">304 Not Modified：東西跟之前長一樣，可以從快取拿就好。</span><br></pre></td></tr></table></figure><p>4xx：Client 端錯誤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">400 Bad Request：請求語法錯誤、或資源太大…等等。</span><br><span class="line">401 Unauthorized：未認證，可能需要登入或 Token。</span><br><span class="line">403 Forbidden：沒有權限。</span><br><span class="line">404 Not Found：找不到資源。</span><br></pre></td></tr></table></figure><p>5xx：Service 端錯誤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">500 Internal Server Error：伺服器出錯，搶票時很可能發生。</span><br><span class="line">501 Not Implemented</span><br><span class="line">502 Bad Gateway：通常是伺服器的某個服務沒有正確執行。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-08-14 Node.js、npm</title>
      <link href="/Blog/2021/08/14/2021-08-14%20Node-js/"/>
      <url>/Blog/2021/08/14/2021-08-14%20Node-js/</url>
      
        <content type="html"><![CDATA[<p>因為在練習串接 API 時，發現需要用到 Node.js，因此針對這個部分做學習。</p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><strong><font color=#800000>Node.js</font></strong></h1><p>Node.js是能夠執行 JavaScript 的一個運行環境，<br>「瀏覽器」是一個能夠運行 JavaScript 的運行環境，<br>在 Node.js 出現以前 JavaScript 「只能」在瀏覽器上運行。<br>所以 Node.js能讓 JavaScript 跑在瀏覽器以外（例如：電腦）。<br>可以在終端機內輸入 JavaScript 語法並且運行。</p><h3 id="瀏覽器與-Node-js-兩者在運行-JavaScript-上的差異"><a href="#瀏覽器與-Node-js-兩者在運行-JavaScript-上的差異" class="headerlink" title="瀏覽器與 Node.js 兩者在運行 JavaScript 上的差異"></a>瀏覽器與 Node.js 兩者在運行 JavaScript 上的差異</h3><p>瀏覽器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提供 JavaScript 一些操作瀏覽器上元素的方法，只有在瀏覽器上才能使用。</span><br><span class="line">例如： document 相關的方法</span><br><span class="line">      內建的對話視窗 alert(), promote(), confirm()</span><br><span class="line">      request 會有某些限制規範。</span><br></pre></td></tr></table></figure><p>Node.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提供 JavaScript 一些操作電腦東西的方法，只有使用 Node.js 才能使用。</span><br><span class="line">例如： FS (file system) 相關方法</span><br><span class="line">      request 可以直接發送到 server</span><br><span class="line">      module.exports 和 require。</span><br></pre></td></tr></table></figure><h1 id="npm-Node-Package-Manager"><a href="#npm-Node-Package-Manager" class="headerlink" title="npm (Node Package Manager)"></a><strong><font color=#800000>npm (Node Package Manager)</font></strong></h1><p>npm 是一個 node.js 的套件管理工具。<br>好處在於：<br>1.統一管理函式庫（更新、下載、刪除）。<br>2.可以使用別人寫好的函式庫（程式）。</p><h3 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a><strong>npm init</strong></h3><p>如果想要在一個 Project 裡面使用 npm ，需要先使用一個指令 npm init<br>在打入 npm init 後，會被要求輸入幾個欄位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package name: Project 名字</span><br><span class="line">version:  Project 版本</span><br><span class="line">description: Project 基本介紹</span><br><span class="line">entry point: 進入點，要跑 Project 應該要執行哪個檔案</span><br><span class="line">author: 作者(自己)</span><br><span class="line">license: Project 採用什麼授權的</span><br><span class="line">test command: 這個不太重要，待會會說明</span><br></pre></td></tr></table></figure><p>基本上結束後，可以看到這個資料夾底下，新增了一個 Package.json，<br>如果覺得上面要一直輸入很冗長，可以使用 npm init -y ，<br>跟 npm init 幾乎一樣，只是會把預設選項全部跳過，<br>產生一個空白的 package.json 。</p><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a><strong>npm install</strong></h3><p>要新增 selenium 的方法很簡單，先搜尋 npm selenium ，<br>就可以找到已經被發佈在 NPM 上的 selenium，<br>而指令也很簡單，npm install selenium-webdriver，<br>接下來會要等一段時間(NPM 會從官方的資料庫去撈函式庫的資料)，<br>安裝完可以看到現有的資料夾裡面新增了兩個檔案，<br>node_modules 和 package-lock.json。<br>指令除了創建了 node_modules，新增整個 selenium-webdriver 的原始碼，<br>還附加了許多資料夾，因為 Selenium 本身會需要引入其他函式庫才能使用，<br>所以會自動幫你都裝好。</p><h3 id="npm-建立的檔案與資料夾"><a href="#npm-建立的檔案與資料夾" class="headerlink" title="npm 建立的檔案與資料夾"></a><strong>npm 建立的檔案與資料夾</strong></h3><p>node_modules：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每個專案要使用的函式庫，</span><br><span class="line">都直接安裝在專案的資料夾底下，</span><br><span class="line">保持每個環境(資料夾)，永遠都不會有相衝突的機會。</span><br></pre></td></tr></table></figure><p>package.json：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用來紀錄專案資訊，所以也包含了函式庫資訊，</span><br><span class="line">別人也可以透過這個檔案去知道使用了哪些函式庫並下載安裝。</span><br><span class="line">之後想把 Project 放到另一個環境時，</span><br><span class="line">只需要複製原始碼，和 package.json，</span><br><span class="line">之後執行 npm install，如果後面不加套件名稱的話，</span><br><span class="line">npm 會當作是你想把 package.json 上現在缺的 Dependency 都裝回來。</span><br></pre></td></tr></table></figure><p>package-lock.json：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install 會照著 package.json 函式庫資訊進行安裝，</span><br><span class="line">而 package.json 函式庫資訊定義了向後（新）兼容依賴，</span><br><span class="line">若有人在 git hub 上 clone 了專案並運行  npm install ，</span><br><span class="line">可能會得到與原專案不同的函式庫版本，</span><br><span class="line">這時候 package-lock.json 就起了很大的作用，</span><br><span class="line">可以根據這個檔案查看當時開發者所使用的版本去下載函式庫，</span><br><span class="line">才不會造成 bug 產生。</span><br><span class="line">每次 npm install / uninstall /update 都會更新。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-08-07 CSS-preprocessor(預處理器)</title>
      <link href="/Blog/2021/08/07/2021-08-07%20CSS-preprocessor/"/>
      <url>/Blog/2021/08/07/2021-08-07%20CSS-preprocessor/</url>
      
        <content type="html"><![CDATA[<p>今天練習了CSS預處理器，紀錄一下今天學了什麼：</p><p><strong>普遍的三款 CSS 預處理器框架，分別是 <font color=#800000>Sass、Less CSS、Stylus</font>。</strong><br>CSS 預處理器是一種語言用來為 CSS 增加一些編程的的特性，無需考慮瀏覽器的兼容性問題，例如可以在 CSS 中使用變量、簡單的程序邏輯、函數等等在編程語言中的一些基本技巧，可以讓 CSS 更加簡潔、適應性更強、代碼更直觀等。<br>這裡從語法、變量、鑲嵌、混入(Mixin)、繼承、導入、函數和操作符等方面分別對這三個框架進行比較。</p><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a><strong><font color=#800000>語法</font></strong></h3><p>首先 Sass 和 Less 都使用標準 CSS 語法，因此可以很方便的將已有的 CSS 代碼轉為預處理器代碼，默認 Sass 使用 .sass 副檔名，而 Less 使用 .less 副檔名。<br>下面是這二者的語法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.scss or style.less */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sass 同時也支持老的語法，就是不包含大括號和分號的方式：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.scss */</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#0982c1</span></span><br></pre></td></tr></table></figure><p>而 Stylus 支持的語法要更多樣性一點，默認使用 .styl 副檔名，下面是 Stylus 支持的語法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.styl */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 省略括號 */</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#0982C1</span>;</span><br><span class="line"><span class="comment">/* 省略冒號和分號 */</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  <span class="selector-tag">color</span> <span class="selector-id">#0982C1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*也可以在同一個樣式單中使用不同的變量，例如下面的寫法也不會報錯：*/</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0982c1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span></span><br><span class="line">  <span class="selector-tag">font-size</span>: <span class="selector-tag">1</span><span class="selector-class">.2em</span></span><br></pre></td></tr></table></figure><h3 id="變量"><a href="#變量" class="headerlink" title="變量"></a><strong><font color=#800000>變量</font></strong></h3><p>可以在 CSS 預處理器中聲明變量，並在整個樣式當中使用，支持任何類型的變量，例如：顏色、數值（不管是否包括單位）、文本，然後可以任意引用該變量。<br>Sass 的變量必須是 $ 開始，然後變量名和值使用冒號隔開，跟 CSS 的屬性一致：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mainColor</span>: <span class="number">#0982c1</span>;</span><br><span class="line"><span class="variable">$siteWidth</span>: <span class="number">1024px</span>;</span><br><span class="line"><span class="variable">$borderStyle</span>: dotted;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$mainColor</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="variable">$borderStyle</span> <span class="variable">$mainColor</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">$siteWidth</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 Less 的變量名使用 @ 符號開始：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mainColor:</span> <span class="number">#0982c1</span>;</span><br><span class="line"><span class="variable">@siteWidth:</span> <span class="number">1024px</span>;</span><br><span class="line"><span class="variable">@borderStyle:</span> dotted;</span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@mainColor</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="variable">@borderStyle</span> <span class="variable">@mainColor</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">@siteWidth</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stylus 對變量名沒有任何限定，你可以是 $ 開始，也可以是任意的字符，而且與變量值之間可以用冒號、空格隔開。<br>需要注意的是 Stylus (0.22.4) 將會編譯 @ 開始的變量，但其對應的值并不會賦予該變量，換句話說在 Stylus 的變量名不要用 @ 開頭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mainColor = #0982c1</span><br><span class="line">siteWidth = 1024px</span><br><span class="line">$borderStyle = dotted</span><br><span class="line">body</span><br><span class="line">  color mainColor</span><br><span class="line">  border 1px $borderStyle mainColor</span><br><span class="line">  max-width siteWidth</span><br></pre></td></tr></table></figure><p>上面的三種不同的 CSS 預處理器的寫法，最後都將產生相同的結果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0982c1</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#0982c1</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1024px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="鑲嵌"><a href="#鑲嵌" class="headerlink" title="鑲嵌"></a><strong><font color=#800000>鑲嵌</font></strong></h3><p>如果需要在CSS中相同的 parent 引用多個元素，需要一遍又一遍地寫 parent。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  而如果用 CSS 預處理器，就可以少些很多單詞，而且父子節點關系一目了然。這三個 CSS 框架都是允許鑲嵌語法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">      <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後生成的 CSS 結果是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0982C1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Mixins-混入"><a href="#Mixins-混入" class="headerlink" title="Mixins (混入)"></a><strong><font color=#800000>Mixins (混入)</font></strong></h3><p>Mixins 有點像是函數，當某段 CSS 經常需要在多個元素中使用時，可以為這些共用的 CSS 定義一個 Mixin，只需要在需要引用這些 CSS 地方調用該 Mixin 即可。<br>Sass 的混入語法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Sass mixin error with (optional) argument $borderWidth which defaults to 2px if not specified */</span></span><br><span class="line"><span class="keyword">@mixin</span> error(<span class="variable">$borderWidth</span>: <span class="number">2px</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">$borderWidth</span> solid <span class="number">#F00</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="keyword">@include</span> error(); <span class="comment">/* Applies styles from mixin error */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.login-error</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="keyword">@include</span> error(<span class="number">5px</span>); <span class="comment">/* Applies styles from mixin error with argument $borderWidth equal to 5px*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Less CSS 的混入語法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* LESS mixin error with (optional) argument @borderWidth which defaults to 2px if not specified */</span></span><br><span class="line"><span class="selector-class">.error</span>(<span class="variable">@borderWidth</span>: <span class="number">2px</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@borderWidth</span> solid <span class="number">#F00</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="selector-class">.error</span>(); <span class="comment">/* Applies styles from mixin error */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.login-error</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="selector-class">.error</span>(<span class="number">5px</span>); <span class="comment">/* Applies styles from mixin error with argument @borderWidth equal to 5px */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Stylus 的混入語法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Stylus mixin error with (optional) argument borderWidth which defaults to 2px if not specified */</span></span><br><span class="line">error(borderWidth= <span class="number">2px</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: borderWidth solid <span class="number">#F00</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">    error(); <span class="comment">/* Applies styles from mixin error */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.login-error</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    error(<span class="number">5px</span>); <span class="comment">/* Applies styles from mixin error with argument borderWidth equal to 5px */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最後都將編譯成如下的 CSS 樣式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.login-error</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a><strong><font color=#800000>繼承</font></strong></h3><p>當需要為多個元素定義相同樣式的時候，我們可以考慮使用繼承的做法。例如我們經常需要：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="comment">/* styles here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Sass 和 Stylus 我們可以這樣寫：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .block; <span class="comment">/* Inherit styles from &#x27;.block&#x27; */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EEE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .block; <span class="comment">/* Inherit styles from &#x27;.block&#x27; */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>先定義 .block ，然後讓 p 、ul 和 ol 元素繼承 .block ，最後生成的 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span>, <span class="selector-tag">p</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EEE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在這方面 Less 的表現，更像是混入寫法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="selector-class">.block</span>; <span class="comment">/* Inherit styles from &#x27;.block&#x27; */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EEE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="selector-class">.block</span>; <span class="comment">/* Inherit styles from &#x27;.block&#x27; */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>生成的 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EEE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">ul</span>,<span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*上面的代碼中，.block 的樣式將會被插入到相應的想要繼承的選擇器中，但需要注意優先級的問題。*/</span></span><br></pre></td></tr></table></figure><h3 id="導入-Import"><a href="#導入-Import" class="headerlink" title="導入 (Import)"></a><strong><font color=#800000>導入 (Import)</font></strong></h3><p>CSS 對導入的做法需要多次的 HTTP 請求。但是在 CSS 預處理器中的導入操作則不同，只是在語義上包含了不同的文件，但結果是一個單一的 CSS 文件，如果是通過 @ import “file.css”; 導入 CSS 文件，那效果跟普通的 CSS 導入一樣。<br>注意：導入文件中定義的混入、變量等也將會被引入到主樣式文件中，需要避免互相沖突。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*reset.css:*/</span></span><br><span class="line"><span class="comment">/* file.&#123;type&#125; */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#EEE</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*main.<span class="doctag">xxx:</span>*/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;reset.css&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;file.&#123;type&#125;&quot;</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最終生成的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;reset.css&quot;</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#EEE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0982C1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顏色參數-Import"><a href="#顏色參數-Import" class="headerlink" title="顏色參數 (Import)"></a><strong><font color=#800000>顏色參數 (Import)</font></strong></h3><p>CSS 預處理器一般都會內置一些顏色處理函數用來對顏色值進行處理，例如加亮、變暗、顏色梯度等。<br>Sass：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lighten($color, <span class="number">10%</span>); <span class="comment">/* returns a color 10% lighter than $color */</span></span><br><span class="line">darken($color, <span class="number">10%</span>);  <span class="comment">/* returns a color 10% darker than $color */</span></span><br><span class="line">saturate($color, <span class="number">10%</span>);   <span class="comment">/* returns a color 10% more saturated than $color */</span></span><br><span class="line">desaturate($color, <span class="number">10%</span>); <span class="comment">/* returns a color 10% less saturated than $color */</span></span><br><span class="line">grayscale($color);  <span class="comment">/* returns grayscale of $color */</span></span><br><span class="line">complement($color); <span class="comment">/* returns complement color of $color */</span></span><br><span class="line">invert($color);     <span class="comment">/* returns inverted color of $color */</span></span><br><span class="line">mix($color1, $color2, <span class="number">50%</span>); <span class="comment">/* mix $color1 with $color2 with a weight of 50% */</span></span><br><span class="line"><span class="comment">/*上面只是簡單列了 Sass 的一些基本顏色處理函數，完整的列表請搜尋 Sass Documentation.*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*一個具體的例子：*/</span></span><br><span class="line"><span class="variable">$color</span>: <span class="number">#0982C1</span>;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid darken(<span class="variable">$color</span>, <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Less CSS:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">lighten</span>(<span class="variable">@color</span>, <span class="number">10%</span>); <span class="comment">/* returns a color 10% lighter than @color */</span></span><br><span class="line"><span class="selector-tag">darken</span>(<span class="variable">@color</span>, <span class="number">10%</span>);  <span class="comment">/* returns a color 10% darker than @color */</span></span><br><span class="line"><span class="selector-tag">saturate</span>(<span class="variable">@color</span>, <span class="number">10%</span>);   <span class="comment">/* returns a color 10% more saturated than @color */</span></span><br><span class="line"><span class="selector-tag">desaturate</span>(<span class="variable">@color</span>, <span class="number">10%</span>); <span class="comment">/* returns a color 10% less saturated than @color */</span></span><br><span class="line"><span class="selector-tag">spin</span>(<span class="variable">@color</span>, <span class="number">10</span>);  <span class="comment">/* returns a color with a 10 degree larger in hue than @color */</span></span><br><span class="line"><span class="selector-tag">spin</span>(<span class="variable">@color</span>, -<span class="number">10</span>); <span class="comment">/* returns a color with a 10 degree smaller hue than @color */</span></span><br><span class="line"><span class="selector-tag">mix</span>(<span class="variable">@color1</span>, <span class="variable">@color2</span>); <span class="comment">/* return a mix of @color1 and @color2 */</span></span><br><span class="line"><span class="comment">/*LESS 完整的顏色函數列表請搜尋 LESS Documentation.*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*LESS 使用顏色函數的例子：*/</span></span><br><span class="line">@<span class="selector-tag">color</span>: <span class="selector-id">#0982C1</span>;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid darken(<span class="variable">@color</span>, <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stylus:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lighten(<span class="attribute">color</span>, <span class="number">10%</span>); <span class="comment">/* returns a color 10% lighter than &#x27;color&#x27; */</span></span><br><span class="line">darken(<span class="attribute">color</span>, <span class="number">10%</span>);  <span class="comment">/* returns a color 10% darker than &#x27;color&#x27; */</span></span><br><span class="line">saturate(<span class="attribute">color</span>, <span class="number">10%</span>);   <span class="comment">/* returns a color 10% more saturated than &#x27;color&#x27; */</span></span><br><span class="line">desaturate(<span class="attribute">color</span>, <span class="number">10%</span>); <span class="comment">/* returns a color 10% less saturated than &#x27;color&#x27; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*完整的顏色函數列表請搜尋 Stylus Documentation.*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*實例：*/</span></span><br><span class="line"><span class="attribute">color</span> = <span class="selector-id">#0982C1</span></span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">  <span class="attribute">background</span> <span class="attribute">color</span></span><br><span class="line">  <span class="attribute">border</span> <span class="number">3px</span> solid darken(<span class="attribute">color</span>, <span class="number">50%</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="運算符"><a href="#運算符" class="headerlink" title="運算符"></a><strong><font color=#800000>運算符</font></strong></h3><p>可以直接在 CSS 預處理器中進行樣式的計算，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: (<span class="number">14px</span>/<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span> + <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100px</span> - <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10</span> * <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3D文字"><a href="#3D文字" class="headerlink" title="3D文字"></a><strong><font color=#800000>3D文字</font></strong></h3><p>要生成具有 3D 效果的文字可以使用 text-shadows ，唯一的問題就是當要修改顏色的時候就非常的麻煩，而通過 mixin 和顏色函數可以很輕鬆的實現：<br>Sass：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> text3d(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">0px</span> darken(<span class="variable">$color</span>, <span class="number">5%</span>),</span><br><span class="line">                 <span class="number">2px</span> <span class="number">2px</span> <span class="number">0px</span> darken(<span class="variable">$color</span>, <span class="number">10%</span>),</span><br><span class="line">                 <span class="number">3px</span> <span class="number">3px</span> <span class="number">0px</span> darken(<span class="variable">$color</span>, <span class="number">15%</span>),</span><br><span class="line">                 <span class="number">4px</span> <span class="number">4px</span> <span class="number">0px</span> darken(<span class="variable">$color</span>, <span class="number">20%</span>),</span><br><span class="line">                 <span class="number">4px</span> <span class="number">4px</span> <span class="number">2px</span> <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">32pt</span>;</span><br><span class="line">    <span class="keyword">@include</span> text3d(<span class="number">#0982c1</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Less CSS：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text3d</span>(<span class="variable">@color</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">0px</span> darken(<span class="variable">@color</span>, <span class="number">5%</span>),</span><br><span class="line">                 <span class="number">2px</span> <span class="number">2px</span> <span class="number">0px</span> darken(<span class="variable">@color</span>, <span class="number">10%</span>),</span><br><span class="line">                 <span class="number">3px</span> <span class="number">3px</span> <span class="number">0px</span> darken(<span class="variable">@color</span>, <span class="number">15%</span>),</span><br><span class="line">                 <span class="number">4px</span> <span class="number">4px</span> <span class="number">0px</span> darken(<span class="variable">@color</span>, <span class="number">20%</span>),</span><br><span class="line">                 <span class="number">4px</span> <span class="number">4px</span> <span class="number">2px</span> <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">32pt</span>;</span><br><span class="line">    <span class="selector-class">.text3d</span>(<span class="number">#0982c1</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Stylus：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text3d</span>(color)</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-tag">color</span></span><br><span class="line">  <span class="selector-tag">text-shadow</span>: <span class="selector-tag">1px</span> <span class="selector-tag">1px</span> <span class="selector-tag">0px</span> <span class="selector-tag">darken</span>(color, <span class="number">5%</span>), <span class="selector-tag">2px</span> <span class="selector-tag">2px</span> <span class="selector-tag">0px</span> <span class="selector-tag">darken</span>(color, <span class="number">10%</span>), <span class="selector-tag">3px</span> <span class="selector-tag">3px</span> <span class="selector-tag">0px</span> <span class="selector-tag">darken</span>(color, <span class="number">15%</span>), <span class="selector-tag">4px</span> <span class="selector-tag">4px</span> <span class="selector-tag">0px</span> <span class="selector-tag">darken</span>(color, <span class="number">20%</span>), <span class="selector-tag">4px</span> <span class="selector-tag">4px</span> <span class="selector-tag">2px</span> <span class="selector-id">#000</span></span><br><span class="line"><span class="selector-tag">span</span></span><br><span class="line">  <span class="selector-tag">font-size</span>: <span class="selector-tag">32pt</span></span><br><span class="line">  <span class="selector-tag">text3d</span>(<span class="number">#0982c1</span>)</span><br></pre></td></tr></table></figure><p>生成的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">32pt</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0982c1</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">0px</span> <span class="number">#097bb7</span>,</span><br><span class="line">                 <span class="number">2px</span> <span class="number">2px</span> <span class="number">0px</span> <span class="number">#0875ae</span>,</span><br><span class="line">                 <span class="number">3px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="number">#086fa4</span>,</span><br><span class="line">                 <span class="number">4px</span> <span class="number">4px</span> <span class="number">0px</span> <span class="number">#07689a</span>,</span><br><span class="line">                 <span class="number">4px</span> <span class="number">4px</span> <span class="number">2px</span> <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="列-Columns"><a href="#列-Columns" class="headerlink" title="列 (Columns)"></a><strong><font color=#800000>列 (Columns)</font></strong></h3><p>使用數值操作和變量可以很方便的實現適應螢幕大小的布局處理。<br>Sass：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$siteWidth</span>: <span class="number">1024px</span>;</span><br><span class="line"><span class="variable">$gutterWidth</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$sidebarWidth</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$siteWidth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$siteWidth</span> - (<span class="variable">$sidebarWidth</span>+<span class="variable">$gutterWidth</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="variable">$gutterWidth</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$sidebarWidth</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Less CSS：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@siteWidth:</span> <span class="number">1024px</span>;</span><br><span class="line"><span class="variable">@gutterWidth:</span> <span class="number">20px</span>;</span><br><span class="line"><span class="variable">@sidebarWidth:</span> <span class="number">300px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@siteWidth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@siteWidth</span> - (<span class="variable">@sidebarWidth</span>+<span class="variable">@gutterWidth</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="variable">@gutterWidth</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@sidebarWidth</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stylus：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">siteWidth = 1024px;</span><br><span class="line">gutterWidth = 20px;</span><br><span class="line">sidebarWidth = 300px;</span><br><span class="line">body &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  width: siteWidth;</span><br><span class="line">&#125;</span><br><span class="line">.content &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: siteWidth - (sidebarWidth+gutterWidth);</span><br><span class="line">&#125;</span><br><span class="line">.sidebar &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  margin-left: gutterWidth;</span><br><span class="line">  width: sidebarWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>實際效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1024px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">704px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上三種框架都支持形如 /* */ 的多行注釋以及 // 的單行注釋。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-08-06 CSS-transition、filter、box-shadow</title>
      <link href="/Blog/2021/08/06/2021-08-06%20CSS-transition%E3%80%81filter%E3%80%81box-shadow/"/>
      <url>/Blog/2021/08/06/2021-08-06%20CSS-transition%E3%80%81filter%E3%80%81box-shadow/</url>
      
        <content type="html"><![CDATA[<p>今天複習 CSS 的 transion . filter . box-shadow 用法：</p><h3 id="transition-套用的屬性-花費時間-時間速率-等待時間"><a href="#transition-套用的屬性-花費時間-時間速率-等待時間" class="headerlink" title="transition: 套用的屬性 花費時間  時間速率 等待時間 ;"></a><strong><font color=#800000>transition: 套用的屬性 花費時間  時間速率 等待時間 ;</font></strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transition: all 2s ease-out 1s;</span><br><span class="line">等同於：</span><br><span class="line">transition-property: all; </span><br><span class="line">transition-duration: 2s;  </span><br><span class="line">transition-timing-function: ease-out;</span><br><span class="line">transition-delay: 1s; </span><br></pre></td></tr></table></figure><p><strong>transition-property：</strong><br>定義哪些 CSS properties 會被轉場效果影響。除了被特別指出的 property ，其他的轉場一如以往會瞬間完成。</p><p><strong>transition-duration：</strong><br>定義轉場所花費的時間。可以只定義一個時間給所有 property ，也可以給定多組不同時間。</p><p><strong>transition-timing-function：</strong><br>設定轉場時所依據的貝茲曲線，除了自行定義之外，還有幾個已經預先定義好的函式：<br>ease         等同於 cubic-bezier(0.25, 0.1, 0.25, 1.0)<br>linear       等同於 cubic-bezier(0.0, 0.0, 1.0, 1.0)<br>ease-in,     等同於 cubic-bezier(0.42, 0, 1.0, 1.0)<br>ease-out,    等同於 cubic-bezier(0, 0, 0.58, 1.0)<br>ease-in-out, 等同於 cubic-bezier(0.42, 0, 0.58, 1.0)</p><p><strong>transition-delay：</strong><br>定義多久之後開始發生轉場。</p><p>如果某個 property 的 list 長度比其他短時，將會被重複直到等長。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: opacity, left, top, height;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">3s</span>, <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>會被瀏覽器解釋成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: opacity, left, top, height;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">3s</span>, <span class="number">5s</span>, <span class="number">3s</span>, <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若列出的 value 過多會被切斷。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: opacity, left;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">3s</span>, <span class="number">5s</span>, <span class="number">2s</span>, <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同於：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: opacity, left;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">3s</span>, <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter-濾鏡-CSS-屬性將模糊或顏色偏移等圖形效果應用於元素。濾鏡通常用於調整圖像、背景和邊框的渲染。"><a href="#filter-濾鏡-CSS-屬性將模糊或顏色偏移等圖形效果應用於元素。濾鏡通常用於調整圖像、背景和邊框的渲染。" class="headerlink" title="filter 濾鏡: CSS 屬性將模糊或顏色偏移等圖形效果應用於元素。濾鏡通常用於調整圖像、背景和邊框的渲染。"></a><strong><font color=#800000>filter 濾鏡: CSS 屬性將模糊或顏色偏移等圖形效果應用於元素。<br/>濾鏡通常用於調整圖像、背景和邊框的渲染。</font></strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* URL to SVG filter */</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">url</span>(<span class="string">&quot;filters.svg#filter-id&quot;</span>);</span><br><span class="line"><span class="comment">/*filter-function(values) */</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.4</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">200%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">16px</span> <span class="number">16px</span> <span class="number">20px</span> blue);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">90deg</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">75%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">opacity</span>(<span class="number">25%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">30%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">sepia</span>(<span class="number">60%</span>);</span><br><span class="line"><span class="comment">/* Multiple filters */</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">175%</span>) <span class="built_in">brightness</span>(<span class="number">3%</span>);</span><br><span class="line"><span class="comment">/* Use no filter */</span></span><br><span class="line"><span class="attribute">filter</span>: none;</span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="attribute">filter</span>: inherit;</span><br><span class="line"><span class="attribute">filter</span>: initial;</span><br><span class="line"><span class="attribute">filter</span>: unset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grayscale   灰階<br>sepia       懷舊<br>saturate    飽和<br>hue-rotate  色相旋轉<br>invert      負片<br>opacity     不透明<br>brightness  亮度<br>contras     對比<br>blur        模糊<br>drop-shadow 下拉陰影</p><h3 id="box-shadow-h-shadow-v-shadow-blur-spread-color-inset"><a href="#box-shadow-h-shadow-v-shadow-blur-spread-color-inset" class="headerlink" title="box-shadow: h-shadow v-shadow blur spread color inset; "></a><strong><font color=#800000>box-shadow: h-shadow v-shadow blur spread color inset; </font></strong></h3><p>h-shadow：水平位移距離<br>v-shadow：垂直位移距離<br>blur：    模糊半徑<br>spread：  擴散距離<br>color：   顏色<br>inset：   內陰影(原本設定在區塊外的陰影變成在內部)<br>至少要提供 h-shadow 、 v-shadow 參數。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章(測試)</title>
      <link href="/Blog/2021/08/05/hello-world/"/>
      <url>/Blog/2021/08/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
